// ----------------------------------------------------------------------------
// $Revision: 0.1 $
// $ $
// $Start Date: 2016/3/25 $ 
// $Last modified: 2016/4/25 $ 
// ----------------------------------------------------------------------------

/*
 *  Created on: Nov 12, 2015
 *      Author: L_Rui
 *  --------------------------------------------------------------------------
 *  Revision: 0.1
 *  Modified date: Jan 20, 2016
 */

//----------------------------------------------------------------------------
#include <sk4_sys.cfi>
#include <sk4_syslib.cfi>
#include "app.cfi"
#include "../hand_shaking/hand_shaking.cfi"
#include "../strategies/strategies.cfi"
#include "../fitting_loop/I2C_fitting.cfi"
#include "../chip_init/chip_init.cfi"


// ----------------------------------------------------------------------------
// Application Version
// ----------------------------------------------------------------------------
// Set the global assembler symbol App_Version equal to the
// pre-processor define APP_VERSION that was defined in app.cfi
.global App_Version
    .equ App_Version, APP_VERSION

// ----------------------------------------------------------------------------
// Main Program
// ----------------------------------------------------------------------------
Sys_Mem_Start_Absolute_Segment(main, SYS_MEMSPACE_P, D_PMEM_BASE)

.global main
main:

    // Clear status register on the CFX to disable interrupts, saturation,
    // rounding, etc.
    load sr, 0
    goto start_app
  
    // Put the application version in P memory at address 0x8002
    .data App_Version

start_app:
    // Initialize stack pointer and initialize the hardware
    call.1d Initialize
    Sys_CFX_InitStack(X_STACK_BOTTOM)   // [ds]
    
    Sys_Delay(75-1)
    call I2CFittingInit
    
    store x[X_FLASH_DONE],0             // Initialize X_FLASH_DONE flag
    store x[X_POWER_UP_STAGE],0         // Initialize X_POWER_UP_STATE flag
    
    // Flash the LED three times and then power up the implant, start timer 1
    Sys_Timer1_Start
    
power_up_loop:
    // Disable all interrupts before checking flags
    Sys_Int_Master_Disable
    
    // Check the CM3_0 done flag
    load x0, x[X_CM3_0_DONE]
    cmp x0, 1 ||| nop
    goto power_up_CM3_0_done if eq

    // Check the CM3 1 done flag
    load x0, x[X_CM3_1_DONE]
    cmp x0, 1 ||| nop
    goto power_up_CM3_1_done if eq

    // Check the I2C Event flag
    load x0, x[X_I2C_EVENT]
    cmp x0, 1 ||| nop
    goto power_up_I2C_event if eq
    
    load x0,x[X_TIMER_1_EVENT]
    cmp x0, 1 ||| nop
    goto power_up_timer_1_event if eq

power_up_loop_end:
    // Refresh the watchdog before going to sleep
    Sys_Watchdog_Refresh
    sleep
    Sys_Int_Master_Enable
    // Loop back to see which interrupt has occurred
    goto power_up_loop
        
//--------------------------------------------------------------------------------    
// The LED has been flashed 3 times. Call PowerUpImplant function
//--------------------------------------------------------------------------------
power_up_loop_turn_on_implant:
    load x0, x[X_POWER_UP_STAGE]                // If the implant is on, go back to the
    cmp x0, POWER_UP_IMPLANT_DONE ||| nop       // waiting loop
    goto power_up_loop_end if eq
    
    store x[X_PWR_UP_CNT], 1        // Reset the S wave counter; Prepare for
                                    // powering up
    store x[X_PWR_UP_STATE], 0      // Reset the state machine
    call PowerUpImplant
    goto power_up_loop_end
    
 
//--------------------------------------------------------------------------------
// Handle X_TIMER_1_EVENT flag
//--------------------------------------------------------------------------------   
power_up_timer_1_event:
    // Reset the X_TIMER_1_EVENT flag
    store x[X_TIMER_1_EVENT], 0
    
    call PowerUpTimer               // Flash the LED
    
    load x0, x[X_FLASH_DONE]        // Check if the LED flashing is done
    cmp x0, 1 ||| nop
    goto power_up_loop_turn_on_implant if eq 
    goto power_up_loop_end
        
//--------------------------------------------------------------------------------       
// Handle X_CM3_1_DONE flag
//--------------------------------------------------------------------------------           
power_up_CM3_0_done:
    // Reset the X_CM3_0_DONE flag
    store x[X_CM3_0_DONE], 0
    goto power_up_loop_end
//--------------------------------------------------------------------------------       
// Handle X_CM3_1_DONE flag
//--------------------------------------------------------------------------------    
power_up_CM3_1_done:

    // Reset the X_CM3_1_DONE flag
    store x[X_CM3_1_DONE], 0
    
    // Check if the implant has been powered up
    load x0, x[X_POWER_UP_STAGE]
    cmp x0, POWER_UP_IMPLANT_DONE ||| nop
    goto mux_switch if ge
    
    call PowerUpImplant
    // Check if the implant has been powered up
    load x0, x[X_POWER_UP_STAGE]
    cmp x0, POWER_UP_IMPLANT_DONE ||| nop
    goto mux_switch if ge
    
    goto power_up_loop_end

mux_switch: 
    // Check if the Mux switch has been done
    load x0, x[X_POWER_UP_STAGE]
    cmp x0, POWER_UP_MUX_DONE ||| nop
    goto set_IC_map if ge
       
    call MuxSwitchVerification
    
    // Check if the Mux switch has been done
    load x0, x[X_POWER_UP_STAGE]
    cmp x0, POWER_UP_MUX_DONE ||| nop
    goto set_IC_map if ge
        
    goto power_up_loop_end
    
set_IC_map:
    // Check if the Set IC map has been done
    load x0, x[X_POWER_UP_STAGE]
    cmp x0, POWER_UP_SET_IC_DONE ||| nop
    goto strategy_loop if ge
    
    call SetICbyMap
    
    // Check if the Set IC map has been done
    load x0, x[X_POWER_UP_STAGE]
    cmp x0, POWER_UP_SET_IC_DONE ||| nop
    goto strategy_CM3_0_done if ge
    
    goto power_up_loop_end
           
//--------------------------------------------------------------------------------
// Handle I2C_EVENT flag
//--------------------------------------------------------------------------------
power_up_I2C_event:
    // Reset the X_I2C_EVENT flag
    store x[X_I2C_EVENT], 0
    call i2c_fitting_proc
    goto power_up_loop_end
    
    
strategy_loop:
    // Disable all interrupts before checking flags
    Sys_Int_Master_Disable
    
    // Check the source of interrupt
    
    // Check the FIFO 0 done flag
    load x0, x[X_FIFO_0_DONE]
    cmp x0, 1 ||| nop
    goto strategy_FIFO_0_done if eq

    // Check the HEAR Function Chain 0 done flag
    load x0, x[X_HEAR_FUNCTION_CHAIN0_DONE]
    cmp x0, 1 ||| nop
    goto strategy_HEAR_function_chain0_done if eq

    // Check the CM3 0 done flag
    load x0, x[X_CM3_0_DONE]
    cmp x0, 1 ||| nop
    goto strategy_CM3_0_done if eq
    
    // Check the CM3 1 done flag
    load x0, x[X_CM3_1_DONE]
    cmp x0, 1 ||| nop
    goto strategy_CM3_1_done if eq
    
    // Check the I2C Event flag
    load x0, x[X_I2C_EVENT]
    cmp x0, 1 ||| nop
    goto strategy_I2C_event if eq
    
strategy_loop_end:    
    // Refresh the watchdog before going to sleep
    Sys_Watchdog_Refresh
    sleep
    // Loop back to see which interrupt has occurred
    goto strategy_loop
    
// ----------------------------------------------------------------------------
// Handle FIFO 0 done
// ----------------------------------------------------------------------------
strategy_FIFO_0_done:
    // Clear the flag
    store x[X_FIFO_0_DONE], 0

    // Re-enable interrupts
    Sys_Int_Master_Enable

    // Launch function chain 0 (analysis)
    Sys_HEAR_Command(function_chain0)

    // Branch back to the top of the main loop
    goto strategy_loop_end  
    
// ----------------------------------------------------------------------------
// Handle HEAR function chain 0 done
// ----------------------------------------------------------------------------
strategy_HEAR_function_chain0_done:

    // Clear the flag
    store x[X_HEAR_FUNCTION_CHAIN0_DONE], 0

    // Re-enable interrupts
    Sys_Int_Master_Enable

    // Call the CIS mapping; update the gain
    call CISMapping 

    // Branch back to the top of the main loop
    goto strategy_loop_end

// ----------------------------------------------------------------------------
// Handle cm3_0 done flag
// ----------------------------------------------------------------------------   
strategy_CM3_0_done:
    // clear the flag
    store x[X_CM3_0_DONE], 0
    
    // Generate the CIS data package
    load xp3, P_PCM_FT_BUF                      // base address of the PCM shared memory
    load xp4, X_ENERGY_SORTING_EL_BASE          // base address of the sorted channel (energy based)
    
    // Insert the forward data of each channel
    loop.2d 8, insert_cis_channel_loop_end
        nop >>> nop
        nop >>> nop 
         
        load x0, x[xp4++] >>> nop               // load index of channel i
        load x1, 0x0000FF
        and x0, x0, x1 ||| nop                  
        shll x0, 11 ||| nop
        load x1, 0x0390
        or x0, x0, x1 ||| nop                   // "index" + "amplitude"
             
        // Check odd-even bit
        move y0, x0 >>> move y1, x0
        shra y1, 8 ||| nop
        xor y0, y0, y1 ||| nop
        move y1, y0 ||| nop
        shra y1, 4 ||| nop
        xor y0, y0, y1 ||| nop
        move y1, y0 >>> nop
        shra y1, 2 ||| nop
        xor y0, y0, y1 ||| nop
        move y1, y0 >>> nop
        shra y1, 1 ||| nop
        xor y0, y0, y1 ||| nop
        and y0, y0, 0x01 ||| nop
         
        or y0, x0, y0 ||| nop              // Load check odd-even bit         
             
        ADD_CODED_DATA(0x003C)             // Data type overheader
        // Add the stimulation frame
        SET_FRAME_PROPERTY(UNCODED_DATA_TYPE, 1, 1)
        move x0, y0 >>> nop
        store P[xp3++], x0                 // Add data
        ADD_ZERO_WAVES(4,3)
        nop
    insert_cis_channel_loop_end:
        nop      
    ADD_PCM_END

    Sys_Int_Master_Enable
    goto strategy_loop_end
    
// ----------------------------------------------------------------------------
// Handle cm3_1 done flag
// ----------------------------------------------------------------------------   
strategy_CM3_1_done:
    // clear the flag
    store x[X_CM3_1_DONE], 0
    Sys_Int_Master_Enable
    goto strategy_loop_end
    
//--------------------------------------------------------------------------------
// Handle I2C_EVENT flag
//--------------------------------------------------------------------------------
strategy_I2C_event:
    // Reset the X_I2C_EVENT flag
    store x[X_I2C_EVENT], 0
    call i2c_fitting_proc
    goto strategy_loop_end
    
    
    
